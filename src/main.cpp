#include "main.h"

using namespace std;


int main() {

    /*
        Keep fighting an enemy. an enemy awards you points.
        this is a game that has no end point, you keep going.
        score to unlock is 1000 for each player type

    */

    /* Set up some inital items */
    string playerTypes[] = {"NONE", "AIR", "FIRE", "WATER", "EARTH", "AVATAR"};
    bool isRunning = true;
    int selected = 0;
    bool unlockedOP = hasUnlockedOP();
    int score = 0;
    int AP = 10;
    char name [10];
    loadFiles(playerTypes);


    srand(time(NULL));

    /* Default HP is 100 */
    int HP = 100;
    run(playerTypes, isRunning, HP, unlockedOP, selected, score, AP, name);
    return 0;
}

/* Reads in a file and gets the player types */
void loadFiles(string (&playerTypes)[6]) {
    fstream dataFile;
    dataFile.open("game_data.csv");

    if(dataFile) {
        cout << "Loading data..." << endl << endl;
    } else{
        ofstream of;
        of.open("game_data.csv", ios::app);
        for (int i = 0; i < 5; i++) {
            of << playerTypes[i] + ", " + "0" << endl;
        }

        of.close();
    }
}

/* gets the data from the file to be used for output and determining player */
std::vector<std::pair<std::string, int> >  getDataFromFile() {
    fstream dataFile;
    dataFile.open("game_data.csv");
    std::vector<std::pair<std::string, int> > data;
    string line;
    if (dataFile) {
        for(int i = 0; i < 6 && !dataFile.eof(); i++) {
            getline(dataFile,line);

            string delimiter = ",";
            string playerType = line.substr(0, line.find(delimiter));
            string score = line.substr(line.find(delimiter) + 1);

            if(playerType.length() != 0 && score.length() != 0) {
                data.push_back(pair<string, int>(playerType, stoi(score)));
            }
        }
    } else {
        cout << "error loading files" << endl;
    }

    return data;
}

/* Determines if the player has unlocked the super player */
bool hasUnlockedOP() {
    vector<pair<string,int>> players = getDataFromFile();
    if(players.back().first == "AVATAR") {
        return true;
    }
    return false;
}


/* Unlocks the super player ;) */
void unlockOP() {
    /*
        Write a freakin' file that allows the super player to come into play.
    */
    ofstream dataFile;
    dataFile.open("game_data.csv", ios::app);
    dataFile << "AVATAR, 0" << endl;
    dataFile.close();

}

void run(string (&playerTypes)[6], bool& isRunning, int& HP, bool& unlockedOP, int& selected, int& score, int& AP, char* name) {

    setupGame(selected);
    selected--;

    setStats(HP, selected, AP);

    setName(name);

    cout << "loading..." << endl;
    std::this_thread::sleep_for(std::chrono::milliseconds(400));
    int selection;
    while(isRunning){
        system("clear");
        printStats(HP, selected, AP, name, score);
        if (HP <= 0) {
            cout << " You are dieded." << endl;
            break;
        }
        cout << endl << endl;
        cout << "Do you wish to battle?" << endl;
        cout << "1: Yes" << endl;
        cout << "2: No" << endl;
        cin >> selection;
        if (selection != 1 && selection != 2) {
            cout << "What do you think you are doing? Stop that!!!" << endl;
            break;
        }
        else if (selection == 1) {
            cout << "Time to Battle!!!" << endl;
            play(playerTypes, isRunning, HP, unlockedOP, selected, score, AP, name);
        } else {
            cout << "Game done" << endl;
            break;
        }

    }
    saveData(playerTypes[selected], score);


}

void saveData(std::string& playerType, int& score) {
    std::vector<std::pair<std::string, int> > curr_data = getDataFromFile();
    ofstream dataFile;
    dataFile.open("game_data.csv", ios::trunc);
    bool unlockOP = true;
    for (pair<string,int> data : curr_data) {
        if (data.first == playerType && score >= data.second) {
            if(score < 1000) { unlockOP = false; }
            dataFile << playerType << ", " << score << endl;
        } else {
            if(data.second < 1000) {unlockOP = false;}
            dataFile << data.first << ", " << data.second << endl;
        }
    }

    dataFile.close();

    if(unlockOP) { unlockOP; }
}

void play(std::string (&playerTypes)[6], bool& isRunning, int& HP, bool& unlockedOP, int& selected, int& score, int& AP, char* name) {
    string enemies[] = {"Pelican", "Duck", "Ogre", "Penguin", "John Cena", "Toad", "Eli Segovia", "Mushroom", "Ork", "Demon", "Flea"};
    vector<int> enemyHP;
    enemyHP.push_back(rand() % 100 + 1); // Pelican
    enemyHP.push_back(rand() % 201 + 1); // Duck
    enemyHP.push_back(rand() % 401 + 100); // Ogre
    enemyHP.push_back(rand() % 100 + 1); // Penguin
    enemyHP.push_back(rand() % 301 + 100); // John Cena
    enemyHP.push_back(rand() % 100 + 1); // Toad
    enemyHP.push_back(rand() % 601 + 100); // Eli Segovia
    enemyHP.push_back(rand() % 11 + 1); // Mushroom
    enemyHP.push_back(rand() % 251 + 100); // Ork
    enemyHP.push_back(rand() % 450 + 1); // Demon
    enemyHP.push_back(rand() % 6 + 1); // Flea

    int e_id = rand() % 11;
    int enemy_hp_remaining = enemyHP[e_id];
    system("clear");
    printStats(HP, selected, AP, name, score);
    cout << endl << endl << "A wild " << enemies[e_id] << " has appeared" << endl << endl << endl;
    std::this_thread::sleep_for(std::chrono::milliseconds(2500));
    while (enemy_hp_remaining > 0){
        system("clear");
        printStats(HP, selected, AP, name, score);
        cout << endl;
        printf("Enemy stats: %6s %6s%d/%d\n\n\n", enemies[e_id].c_str(), "HP: ", enemy_hp_remaining, enemyHP[e_id]);

        int selection;
        cout << "What do you wish to do?" << endl;
        cout << "1: Attack" << endl;
        cout << "2: Run" << endl;
        cin >> selection;
        if (selection != 1 && selection != 2) {
                cout << "What do you think you are doing? Stop that!!!" << endl;
                break;
            }
            else if (selection == 1) {
                system("clear");
                string msgs[] = {"You attack the enemy", "You bash the enemy's head", "You use your abilities to harm the enemy", "You hurt the enemy's feelings", "You bully the enemy and cause them to lose HP", "You call the enemy a bad name", "You punch the enemy", "You hurt the enemy with kindness"};
                cout << msgs[rand() % 8] << endl;

                enemy_hp_remaining = enemy_hp_remaining - AP;
                if (enemy_hp_remaining <= 0){
                    string killMsgs[] = {"You killed the enemy. :( Why'd you do that?", "You murdered the enemy", "You killed the enemy", "You took the enemy's life", "Remember when the enemy was alive? It is no longer", "The enemy went to heaven.", "The enemy died."};
                    cout << killMsgs[rand() % 7] << endl;
                    score += enemyHP[e_id];
                    cout << "Health Replenished" << endl;
                    HP = getStats(selected).first;
                    std::this_thread::sleep_for(std::chrono::milliseconds(3000));
                    break;
                }
                cout << "The enemy attacks back" << endl << endl << endl;
                HP = HP - (enemyHP[e_id] / (rand() % 15 + 5));
                if (HP <= 0) {
                    break;
                }
                if (rand() % 8 == 3) {
                    cout << "You're health replenished randomly" << endl;
                    HP = getStats(selected).first;
                }
                std::this_thread::sleep_for(std::chrono::milliseconds(2500));
            } else {
                cout << "You run away like a chicken" << endl;
                std::this_thread::sleep_for(std::chrono::milliseconds(1000));
                break;
            }
    }

}

pair<int, int> getStats(int& selected) {
    int HP, AP;
    switch(selected) {
        case 1:
            HP = 100;
            AP = 10;
            break;
        case 2:
            HP = 300;
            AP = 25;
            break;
        case 3:
            HP = 185;
            AP = 50;
            break;
        case 4:
            HP = 350;
            AP = 10;
            break;
        case 5:
            HP = 200;
            AP = 35;
        case 6:
            HP = 400;
            AP = 55;
            break;
        default:
            HP = 100;
            AP = 10;
    }
    return pair<int,int>(HP, AP);
}

void setStats(int& HP, int& selected, int& AP) {
    pair<int,int> stats;
    stats = getStats(selected);
    HP = stats.first;
    AP = stats.second;
}

void printStats(int& HP, int& selected, int& AP, char* name, int& score){
    pair<int,int> stats;
    stats = getStats(selected);
    int hpTotal = stats.first;
    printf("%s %7s%d/%d %10s%d %10s%d\n", name, "HP:", HP, hpTotal, "Attack:", AP, "Score:", score);
}


void setName(char* name) {
    cout << "What is your player's name?" << endl;
    cin >> name;
}

void setupGame(int& selected) {

    /* Seriously no need to analyze the next line here. It's just a container to hold the messages at
       the start of the game. I didn't make newlines for each msg because that would be too much vertical
       space being wasted */

    string hardCodedMSGs[] = {"Welcome to the best ATM in the... I mean game... This is not an ATM","Welcome to my basic game...","Hello there. I think you're going to solve my exploitable application!","Hi there! Welcome to this basic game!","This is not a bank nor atm. This is a game","Welcome to the worst exploitable game you could imagine","Hi there, this is a quick basic game"};

    cout << hardCodedMSGs[rand() % 7] << endl << endl << endl;

    cout << "Which character would you like to choose?" << endl << endl;
    std::vector<std::pair<std::string, int> >  currentPlayers = getDataFromFile();
    bool isSelected = false;
    bool attempted = false;
    while (!isSelected) {
        if (attempted) {
            system("clear");
            cout << "Please choose a valid type" << endl << endl;
        }

        printf("# %6s %15s\n", "Type", "Best Score");
        for(int i = 0; i < currentPlayers.size(); i++){
            string type = currentPlayers.at(i).first;
            int score = currentPlayers.at(i).second;
            printf("%d: %5s %10d", i+1, type.c_str(), score);
            cout << endl;
        }
        cout << endl;
        cout << "Selection: ";
        cin >> selected;
        if (selected > 0 && selected <= currentPlayers.size()) {
            isSelected = true;
        }
        attempted = true;
    }

}

